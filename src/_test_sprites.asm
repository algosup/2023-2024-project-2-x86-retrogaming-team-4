;print a sprite 8 x 8 bytes on the screen

org 100h

section .data

xPos dw 0

xVelocity dw 1

sprite db 0x00, 0x00, 0x28, 0x28, 0x28, 0x28, 0x00, 0x00
       db 0x00, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x00
       db 0x28, 0x28, 0x0F, 0x0F, 0x28, 0x0F, 0x0F, 0x28
       db 0x28, 0x28, 0x2C, 0x21, 0x28, 0x0F, 0x21, 0x28
       db 0x28, 0x28, 0x0F, 0x0F, 0x28, 0x0F, 0x0F, 0x28
       db 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28
       db 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28
       db 0x00, 0x28, 0x28, 0x00, 0x28, 0x28, 0x00, 0x28

sprite2 db 0x00, 0x00, 0x34, 0x34, 0x34, 0x34, 0x00, 0x00
        db 0x00, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x00
        db 0x34, 0x34, 0x0F, 0x0F, 0x34, 0x0F, 0x0F, 0x34
        db 0x34, 0x34, 0x0F, 0x21, 0x34, 0x0F, 0x21, 0x34
        db 0x34, 0x34, 0x0F, 0x0F, 0x34, 0x0F, 0x0F, 0x34
        db 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34
        db 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34
        db 0x00, 0x34, 0x34, 0x00, 0x34, 0x34, 0x00, 0x34

sprite3 db 0x00, 0x00, 0x42, 0x42, 0x42, 0x42, 0x00, 0x00
        db 0x00, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x00
        db 0x42, 0x42, 0x0F, 0x0F, 0x42, 0x0F, 0x0F, 0x42
        db 0x42, 0x42, 0x0F, 0x21, 0x42, 0x0F, 0x21, 0x42
        db 0x42, 0x42, 0x0F, 0x0F, 0x42, 0x0F, 0x0F, 0x42
        db 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42
        db 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42
        db 0x00, 0x42, 0x42, 0x00, 0x42, 0x42, 0x00, 0x42

sprite4 db 0x00, 0x00, 0x54, 0x54, 0x54, 0x54, 0x00, 0x00
        db 0x00, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x00
        db 0x54, 0x54, 0x0F, 0x0F, 0x54, 0x0F, 0x0F, 0x54
        db 0x54, 0x54, 0x0F, 0x21, 0x54, 0x0F, 0x21, 0x54
        db 0x54, 0x54, 0x0F, 0x0F, 0x54, 0x0F, 0x0F, 0x54
        db 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54
        db 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54
        db 0x00, 0x54, 0x54, 0x00, 0x54, 0x54, 0x00, 0x54

maze db 0x00, 0x00, 0x54, 0x54, 0x54, 0x54, 0x00, 0x00, 0x00, 0x00, 0x54, 0x54, 0x54, 0x54, 0x00, 0x00
     db 0x00, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x00, 0x00, 0x00, 0x54, 0x54, 0x54, 0x54, 0x00, 0x00
     db 0x54, 0x54, 0x0F, 0x0F, 0x54, 0x0F, 0x0F, 0x54, 0x00, 0x00, 0x54, 0x54, 0x54, 0x54, 0x00, 0x00
     db 0x54, 0x54, 0x0F, 0x21, 0x54, 0x0F, 0x21, 0x54, 0x00, 0x00, 0x54, 0x54, 0x54, 0x54, 0x00, 0x00
     db 0x54, 0x54, 0x0F, 0x0F, 0x54, 0x0F, 0x0F, 0x54, 0x00, 0x00, 0x54, 0x54, 0x54, 0x54, 0x00, 0x00
     db 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x00, 0x00, 0x54, 0x54, 0x54, 0x54, 0x00, 0x00
     db 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x00, 0x00, 0x54, 0x54, 0x54, 0x54, 0x00, 0x00
     db 0x00, 0x54, 0x54, 0x00, 0x54, 0x54, 0x00, 0x54, 0x00, 0x00, 0x54, 0x54, 0x54, 0x54, 0x00, 0x00
     db 0x00, 0x00, 0x54, 0x54, 0x54, 0x54, 0x00, 0x00, 0x00, 0x00, 0x54, 0x54, 0x54, 0x54, 0x00, 0x00
     db 0x00, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x00, 0x00, 0x00, 0x54, 0x54, 0x54, 0x54, 0x00, 0x00
     db 0x54, 0x54, 0x0F, 0x0F, 0x54, 0x0F, 0x0F, 0x54, 0x00, 0x00, 0x54, 0x54, 0x54, 0x54, 0x00, 0x00
     db 0x54, 0x54, 0x0F, 0x21, 0x54, 0x0F, 0x21, 0x54, 0x00, 0x00, 0x54, 0x54, 0x54, 0x54, 0x00, 0x00
     db 0x54, 0x54, 0x0F, 0x0F, 0x54, 0x0F, 0x0F, 0x54, 0x00, 0x00, 0x54, 0x54, 0x54, 0x54, 0x00, 0x00
     db 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x00, 0x00, 0x54, 0x54, 0x54, 0x54, 0x00, 0x00
     db 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x00, 0x00, 0x54, 0x54, 0x54, 0x54, 0x00, 0x00
     db 0x00, 0x54, 0x54, 0x00, 0x54, 0x54, 0x00, 0x54, 0x00, 0x00, 0x54, 0x54, 0x54, 0x54, 0x00, 0x00
base: equ 0xf9fe
old_time: equ base+0x06
;[0, 40, 65, 84, 0, 52, 78, 66, 0, 44, 0, 33, 48, 3, 88, 15]

section .text

mov ax, 0013h      ; Set Video Mode 4F02h (VBE mode 101h) - 640x480, 256 colors
;mov bx, 101h    ; VBE mode 101h
int 10h

GameLoop:

mov ah, 00h
int 1ah ; BIOS clock read
cmp dx, [old_time] ; Wait for change
je GameLoop ; Loop
mov [old_time], dx

call clearScreen

mov al, 0FFh
;call printMaze
mov di, [xPos]
mov si, sprite
call changeColor
call printGhost
mov bx, [xPos]
add bx, [xVelocity]
mov word [xPos], bx



cmp word [xPos], 320-8 
je ChangeVelocity
cmp word [xPos], 0
je ChangeVelocity
jmp GameLoop


; mov di, 12
; mov si, sprite2
; call printGhost

; mov di, 24
; mov si, sprite3
; call printGhost

; mov di, 36
; mov si, sprite4
; call printGhost


;reset the keyboard buffer and then wait for a keypress :

Exit:
mov ax, 0C01h ; 
int 21h

;dos box default video mode
mov ax, 03h 
int 21h

int 20h ;quit





the_functions:

; need to set the color of filling in al
clearScreen:
mov ax, 0xA000
mov es, ax
mov di, 0
mov cx, 320*200
rep stosb
ret 

printMaze:
mov ax, 0xA000
mov es, ax
mov di, 48
mov si, maze
mov dx, 16
loopy5:
    mov cx, 16
    rep movsb
    add di, 640-16
    dec dx
    jnz loopy5
ret

printGhost:
mov ax, 0xA000
mov es, ax
mov dx, 8
loopyy:
    mov cx, 8
    rep movsb
    add di, 320-8
    dec dx
    jnz loopyy
ret

ChangeVelocity:
neg word [xVelocity]
jmp GameLoop

changeColor:
cmp word [xVelocity], 0
jg continue
mov si, sprite2
continue:
ret

; -----------------------------------------------
; Load palette.
;   bx = start of DAC registers (=start color)
;   cx = number of DAC registers (=number of color)
;   es:dx = source buffer
gfxLoadPalette:
    mov ax, 1012h       ; ah=10h -> set color / al=12h -> selects block of DAC register subfn.
    int 10h
    ret

; -----------------------------------------------
; Wait for vertical sync.
; scraps ax and dx
gfxWaitForVSync:
   mov dx, 0x3DA
.loop1:
   in al, dx
   test al, 8
   jnz .loop1
.loop2:
   in al, dx
   test al, 8
   jz .loop2
   ret